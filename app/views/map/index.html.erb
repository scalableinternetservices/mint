

<style>

    .counties {
        fill: none;
    }

    .states {
        fill: none;
        stroke: #fff;
        stroke-linejoin: round;
    }

    .q0-9 { fill: rgb(251, 250, 111); }
    .q1-9 { fill:rgb(222,235,247); }
    .q2-9 { fill:rgb(198,219,239); }
    .q3-9 { fill:rgb(158,202,225); }
    .q4-9 { fill:rgb(107,174,214); }
    .q5-9 { fill:rgb(66,146,198); }
    .q6-9 { fill:rgb(33,113,181); }
    .q7-9 { fill:rgb(8,81,156); }
    .q8-9 { fill:rgb(8,48,107); }

</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/queue-async/1.0.7/queue.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/topojson/1.6.19/topojson.min.js"></script>

<script>

var rateById = d3.map();
var width = 960,
    height = 500;

// Limit id to a single digit for easy testing of shading
function normalizeId(id) {
    id %= 10000;
    id %= 1000;
    id %= 100;
    id %= 10;

    return id;

}

var path = d3.geo.path();

var svg = d3.select("body").append("svg")
        .attr("width", width)
        .attr("height", height);

// Load data and then call ready function
queue()
        .defer(d3.json, "http://www.tygiacalone.com/mint/us.json")
        .defer(d3.tsv, "http://www.tygiacalone.com/mint/unemployment_tab.tsv")
        .await(ready);

// For testing drawing colors
function getRandomColor() {
    var letters = '0123456789ABCDEF'.split('');
    var color = '#';
    for (var i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
};


function ready(error, us, unemployment) {
    if (error) throw error;

    // Set up counties
    svg.append("g")
            .attr("class", "counties")
            .selectAll("path")
            .data(topojson.feature(us, us.objects.counties).features)
            .enter().append("path")
            .attr("d", path)
            .attr("class", function (d) { return quantize(d); });


    // Draw state paths
    svg.append("path")
            .datum(topojson.mesh(us, us.objects.states, function (a, b) {
                return a.id !== b.id;
            }))
            .attr("class", "states")
            .attr("d", path);

    // Determine which class to apply to each county
    function quantize(d) {
        var scaling_factor = 100;
        var obj = unemployment[d.id];
        var rate = 0;

        console.log(obj);
        //console.log('new obj: \n')
        if (obj !== undefined && obj.hasOwnProperty('rate'))
            rate = obj['rate'];
        
        console.log(rate);

        //console.log(val);
        //console.log(Math.min(8, Math.floor(val / 10000)));
        //return "q" + normalizeId(val) + "-9";
        //return "q" + Math.min(8, Math.floor(val / 1000)) + "-9";
        return "q" + Math.min(8, ~~((rate * scaling_factor) * 9 / 12)) + "-9";
    }

}



</script>


